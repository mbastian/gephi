OpenIDE-Module-Display-Category=Plugin
OpenIDE-Module-Long-Description=\
    Layout algorithm for very large undirected graphs, based on Frutcherman-Reingold. \
    The algorithm uses edge-cutting to better distinguish clusters. \
    Therefore the quality of the result depends on the type of graph. \
    It can be run in parallel to speed up computing.\n\n\
    The algorithm is originally based on Frutcherman-Reingold and work with a fixed number of iterations. \
    The algorithm has five different phases: liquid, expansion, cool-down, crunch, and simmer. \
    Each stage is a fraction of the total iterations and several parameters like temperature, attraction and damping are modified. \
    The default schedule spends approximately 25% of its time in the liquid stage, 25% in the expansion stage, 25% in the cool-down stage, 10% in the crunch stage, and 15% in the simmer stage.\n\n\
    Parallel\n\nOpenOrd can be run in parallel to speed up computation. \
    Each thread will work on a subset of the nodes of the graph. \
    It's recommened to put the number of core minus 1 to keep a thread for display. \
    For example on a quad-core computer, it's good to use three threads.\n\n\
    Edge-Cutting\n\nEdge-cutting in OpenOrd is specified using a fraction from 0 to 1. \
    An edge-cutting value of 0 corresponds to the standard Frutcherman-Reingold layout algorithm (no cutting), while an edge-cutting value of 1 corresponds to aggressive cutting. \
    Aggressive cutting promotes clustering but will not cut every edge. \
    The default value for edge-cutting in OpenOrd is 0.8.\n\n\
    The original OpenOrd C++ implementation is available at the following address : http://www.cs.sandia.gov/~smartin/software.html. \
    This version doesn't include the multi-level version of the algorithm.
OpenIDE-Module-Name=OpenOrdLayout

OpenIDE-Module-Short-Description=Parallel layout algorithm for very large undirected graphs, based on Frutcherman-Reingold
OpenOrd.description = Layout algorithm for very large undirected graphs, based on Frutcherman-Reingold. The algorithm uses edge-cutting to better distinguich clusters, therefore the quality of the result depends on the type of graph. It can be run in parallel to speed up computing.

OpenOrd.properties.edgecut.name = Edge Cut
OpenOrd.properties.edgecut.description = 0 means no cutting and 1 maximum cutting. A higher cutting means a more clustered result.

OpenOrd.properties.numthreads.name = Num Threads
OpenOrd.properties.numthreads.description = The number of threads to use to run the algorithm. Increase this number for multi-core computers. It's recommened to put the number of core minus 1 to keep a thread for display.

OpenOrd.properties.numiterations.name = Num Iterations
OpenOrd.properties.numiterations.description = Increase this number only for very large graphs. More iterations, more time it takes and less dense the result will be. Minimum is 100 iterations, and default is 750.

OpenOrd.properties.resetposition.name = Reset Position
OpenOrd.properties.resetposition.description = Reset the position at the algorithm startup. Uncheck this if you wanna layout new nodes on a previously layouted graph.

OpenOrd.properties.seed.name = Random seed
OpenOrd.properties.seed.description = The result of the algorithm depends on the seed, the number of iterations and the number of threads.
